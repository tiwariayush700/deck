// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "deck/core/database"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, out
func (_m *Repository) Create(ctx context.Context, out interface{}) database.Error {
	ret := _m.Called(ctx, out)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) database.Error); ok {
		r0 = rf(ctx, out)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, out, id
func (_m *Repository) Delete(ctx context.Context, out interface{}, id interface{}) database.Error {
	ret := _m.Called(ctx, out, id)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.Error); ok {
		r0 = rf(ctx, out, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, out, id
func (_m *Repository) Get(ctx context.Context, out interface{}, id interface{}) database.Error {
	ret := _m.Called(ctx, out, id)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.Error); ok {
		r0 = rf(ctx, out, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, out, id
func (_m *Repository) Update(ctx context.Context, out interface{}, id interface{}) database.Error {
	ret := _m.Called(ctx, out, id)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.Error); ok {
		r0 = rf(ctx, out, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}
