// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	database "deck/core/database"

	mock "github.com/stretchr/testify/mock"

	model "deck/model"
)

// CardRepository is an autogenerated mock type for the CardRepository type
type CardRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, out
func (_m *CardRepository) Create(ctx context.Context, out interface{}) database.Error {
	ret := _m.Called(ctx, out)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) database.Error); ok {
		r0 = rf(ctx, out)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// CreateDeckCards provides a mock function with given fields: ctx, deck, cards
func (_m *CardRepository) CreateDeckCards(ctx context.Context, deck *model.Deck, cards []model.Card) database.Error {
	ret := _m.Called(ctx, deck, cards)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Deck, []model.Card) database.Error); ok {
		r0 = rf(ctx, deck, cards)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, out, id
func (_m *CardRepository) Delete(ctx context.Context, out interface{}, id interface{}) database.Error {
	ret := _m.Called(ctx, out, id)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.Error); ok {
		r0 = rf(ctx, out, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// DeleteCardsFromDeck provides a mock function with given fields: ctx, deckID, cardIDs
func (_m *CardRepository) DeleteCardsFromDeck(ctx context.Context, deckID string, cardIDs []string) database.Error {
	ret := _m.Called(ctx, deckID, cardIDs)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) database.Error); ok {
		r0 = rf(ctx, deckID, cardIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// Get provides a mock function with given fields: ctx, out, id
func (_m *CardRepository) Get(ctx context.Context, out interface{}, id interface{}) database.Error {
	ret := _m.Called(ctx, out, id)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.Error); ok {
		r0 = rf(ctx, out, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}

// GetDeckView provides a mock function with given fields: ctx, deckID, count
func (_m *CardRepository) GetDeckView(ctx context.Context, deckID string, count int) (*model.DeckView, database.Error) {
	ret := _m.Called(ctx, deckID, count)

	var r0 *model.DeckView
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *model.DeckView); ok {
		r0 = rf(ctx, deckID, count)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeckView)
		}
	}

	var r1 database.Error
	if rf, ok := ret.Get(1).(func(context.Context, string, int) database.Error); ok {
		r1 = rf(ctx, deckID, count)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(database.Error)
		}
	}

	return r0, r1
}

// QueryCards provides a mock function with given fields: ctx, params, filter
func (_m *CardRepository) QueryCards(ctx context.Context, params map[string]interface{}, filter string) ([]model.Card, database.Error) {
	ret := _m.Called(ctx, params, filter)

	var r0 []model.Card
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, string) []model.Card); ok {
		r0 = rf(ctx, params, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Card)
		}
	}

	var r1 database.Error
	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, string) database.Error); ok {
		r1 = rf(ctx, params, filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(database.Error)
		}
	}

	return r0, r1
}

// QueryInCards provides a mock function with given fields: ctx, v
func (_m *CardRepository) QueryInCards(ctx context.Context, v []string) ([]model.Card, database.Error) {
	ret := _m.Called(ctx, v)

	var r0 []model.Card
	if rf, ok := ret.Get(0).(func(context.Context, []string) []model.Card); ok {
		r0 = rf(ctx, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Card)
		}
	}

	var r1 database.Error
	if rf, ok := ret.Get(1).(func(context.Context, []string) database.Error); ok {
		r1 = rf(ctx, v)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(database.Error)
		}
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, out, id
func (_m *CardRepository) Update(ctx context.Context, out interface{}, id interface{}) database.Error {
	ret := _m.Called(ctx, out, id)

	var r0 database.Error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, interface{}) database.Error); ok {
		r0 = rf(ctx, out, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(database.Error)
		}
	}

	return r0
}
