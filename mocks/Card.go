// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"
	api "deck/core/api"

	mock "github.com/stretchr/testify/mock"

	model "deck/model"
)

// Card is an autogenerated mock type for the Card type
type Card struct {
	mock.Mock
}

// CreateDeck provides a mock function with given fields: ctx, request
func (_m *Card) CreateDeck(ctx context.Context, request api.DeckRequest) (*model.Deck, error) {
	ret := _m.Called(ctx, request)

	var r0 *model.Deck
	if rf, ok := ret.Get(0).(func(context.Context, api.DeckRequest) *model.Deck); ok {
		r0 = rf(ctx, request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Deck)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, api.DeckRequest) error); ok {
		r1 = rf(ctx, request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DrawCards provides a mock function with given fields: ctx, deckID, cardIDs
func (_m *Card) DrawCards(ctx context.Context, deckID string, cardIDs []string) error {
	ret := _m.Called(ctx, deckID, cardIDs)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, deckID, cardIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDeckView provides a mock function with given fields: ctx, count, deckID
func (_m *Card) GetDeckView(ctx context.Context, count int, deckID string) (*model.DeckView, error) {
	ret := _m.Called(ctx, count, deckID)

	var r0 *model.DeckView
	if rf, ok := ret.Get(0).(func(context.Context, int, string) *model.DeckView); ok {
		r0 = rf(ctx, count, deckID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.DeckView)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(ctx, count, deckID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
